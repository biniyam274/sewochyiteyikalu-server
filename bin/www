#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
require('dotenv').config()
const debug = require('debug')('demo2:server');
const http = require('http');
const colors = require('colors');
const mongoose = require('mongoose');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);


/**
 * Connect to Mongo Db.
 */


 
 mongoose.connect(process.env.CONNECTIONSTRING, { useNewUrlParser: true }, err => {
   if (err) return logMessage(err, true);
   return logMessage(`Connected to MongoDB on port ${colors.red(27017)}\n URI:${process.env.CONNECTIONSTRING}`);
 });
 mongoose.connection.on('error', error => console.log(error));
//  mongoose.Promise = global.Promise;
 
 
 const logMessage = (msg, err) => {
   let d = new Date().toLocaleTimeString();
   if (err) {
     return console.log(`${colors.grey(d)} ❗️ ${colors.red(msg)}`);
   }
   return console.log(`${colors.grey(d)} ✨ ${colors.green(msg)}`);
 };


/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  logMessage(`Server is up at URI:localhost:${process.env.PORT}`)
}
